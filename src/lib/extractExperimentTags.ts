// Utility to extract smart tags from a Three.js experiment file based on function names and keywords
// Usage: extractExperimentTags(sourceCode: string): string[]

const FUNCTION_TAG_MAP: Record<string, string> = {
  createHexGrid: 'hex grid',
  createPrimitives: 'primitives',
  createDataStreams: 'data stream',
  setupGUI: 'gui',
  animate: 'animation',
  renderBloom: 'bloom',
  OrbitControls: 'orbit controls',
  EffectComposer: 'postprocessing',
  UnrealBloomPass: 'bloom',
  PointLight: 'interactive light',
  InstancedMesh: 'instanced mesh',
  TubeBufferGeometry: 'tube geometry',
  MeshStandardMaterial: 'pbr material',
  MeshBasicMaterial: 'basic material',
  CatmullRomCurve3: 'curve',
};

export function extractExperimentTags(sourceCode: string): string[] {
  const tags = new Set<string>();
  for (const [key, tag] of Object.entries(FUNCTION_TAG_MAP)) {
    if (sourceCode.includes(key)) tags.add(tag);
  }
  // Always add base tags
  tags.add('three.js');
  tags.add('typescript');
  return Array.from(tags);
}

// HexaGrids experiment tags generated by extractExperimentTags utility:
// [
//   'hex grid', 'primitives', 'data stream', 'gui', 'animation', 'bloom',
//   'orbit controls', 'postprocessing', 'interactive light', 'instanced mesh',
//   'tube geometry', 'pbr material', 'basic material', 'curve', 'three.js', 'typescript'
// ]
// Voeg deze array toe aan je experiment object in src/experiments/index.ts:
//
// tags: [
//   'hex grid', 'primitives', 'data stream', 'gui', 'animation', 'bloom',
//   'orbit controls', 'postprocessing', 'interactive light', 'instanced mesh',
//   'tube geometry', 'pbr material', 'basic material', 'curve', 'three.js', 'typescript'
// ],
